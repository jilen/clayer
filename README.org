* ZLayer like data type for ~cats.effect.IO~

This small library is intented to direct copy into your project.

Components:

#+BEGIN_SRC scala
  trait DB
  object DB {
    val live: Layer[Any, DB] = Layer.resource {
      makeRes("db").as(new DB {})
    }
  }

  trait HttpCli
  object HttpCli {
    val live: Layer[Any, HttpCli] = Layer.resource {
      makeRes("httpClient").as(new HttpCli {})
    }
  }

  trait AClient
  object AClient {
    val live: Layer[HttpCli, AClient] = Layer.resource { (a: HttpCli) =>
      makeRes("AClient").as(new AClient {})
    }
  }

  trait Service1
  object Service1 {
    val live: Layer[DB & HttpCli, Service1] = Layer.fromFunction {
      (db: DB, http: HttpCli) =>
      new Service1 {}
    }
  }
  trait Service2
  object Service2 {
    val live: Layer[DB & AClient, Service2] = Layer.fromFunction {
      (db: DB, aclient: AClient) =>
      new Service2 {}
    }
  }

  trait App
  object App {
    val live: Layer[Service1 & Service2, App] = Layer.resource {
      (s1: Service1, s2: Service2) =>
      makeRes("app").as(new App {})
    }
  }
  #+END_SRC

Layers:
#+BEGIN_SRC scala
  val appLayer: Layer[Any, App] =
      (DB.live ++ (HttpCli.live >+> AClient.live)) >>> (Service1.live ++ Service2.live) >>> App.live // Munally construction

  val appLayer = Layer.make[App]( // Auto construction
      DB.live,
      HttpCli.live,
      AClient.live,
      Service1.live,
      Service2.live,
      App.live
    )
#+END_SRC
